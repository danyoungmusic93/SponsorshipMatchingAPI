

Don't forget documentation!!! Consider using an autogenerated doc for endpoints
Don't forget input validation and error handling
Don't forget to organize imports/pylint/etc
Don't forget unit tests
Update requirements.txt


League = {
    name = "a;kasd",
    coordinates = (134234, 0824350) immutable named tuples?,
    price = "$7500"
}

Database layer
    Mongo

API layer
    Flask
    CRUD Methods
        GET Request
            Find a league to sponsor
            params = [coordinates, radius, budget]
            
            Algorithm to find maximum number of leagues to sponsor within budget
                Sort by lowest cost, take max 


        PUT Request
            Add a new league to the database with given parameters



leagues = [
    1 : {
        name = "The Wyld Stallions", 
        price = "$4,500" 
    }
    2 : {
        "Team Zoidberg", 
        "$6,000"
    }
    3 : {
        "The Zoomers", 
        "$1,500"
    }
    4 : {
        "North Horseburg Little League", 
        "$3,500"
    }
    5 : {
        "The Duloc Ogres", 
        "$2,500"
    }
]


What I did
    Started by sketching out Top Down tasks
        Considered what to use for technology
        Settled on Mongo because as of now, the API doesn't require a relational database
        Found a good PyPi library made by Google for calculating positions from given Lat/Lon
    Put together some sample data
    Worked out the Algorithm for selecting leagues to sponsor
    Created a class to help create data conformity
    Hooked up Mongo
        Separated out interface make switching databases easier in the future
    Began building flask application    
        Check server / database health
        REST suggests that actions should not exist in the URI, and that multiple Request
          types can be made from the same URI. The two required endpoints for the API share 
          a URI, but are called by different HTTP requests (POST, GET)
    Unit Testing 
        During testing, I realized I needed to extract instances of the Mongo database from interface
          methods.
    Linting / Refactoring        
          






